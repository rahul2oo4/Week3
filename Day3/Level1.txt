1. Bubble Sort - Sort Student Marks
Problem Statement:
A school maintains student marks in an array. Implement Bubble Sort to sort the student marks in ascending order.
Hint:
Traverse through the array multiple times.
Compare adjacent elements and swap if needed.
Repeat the process until no swaps are required.


public class Bubble {
   public static void main(String[] args) {
       int[] marks = {78, 45, 89, 32, 56, 99, 12};
       bubbleSort(marks);
       for (int mark : marks) {
           System.out.print(mark + " ");
       }
   }

   public static void bubbleSort(int[] array) {
       int n = array.length;
       for (int i = 0; i < n - 1; i++) {
           for (int j = 0; j < n - i - 1; j++) {
               if (array[j] > array[j + 1]) {
                   int temp = array[j];
                   array[j] = array[j + 1];
                   array[j + 1] = temp;
               }
           }
       }
   }
}




2. Insertion Sort - Sort Employee IDs
Problem Statement:
A company stores employee IDs in an unsorted array. Implement Insertion Sort to sort the employee IDs in ascending order.
Hint:
Divide the array into sorted and unsorted parts.
Pick an element from the unsorted part and insert it into its correct position in the sorted part.
Repeat for all elements.


public class Insertion {
   public static void main(String[] args) {
       int[] employeeIds = {45, 12, 78, 34, 89, 23, 56};
       insertionSort(employeeIds);
       for (int id : employeeIds) {
           System.out.print(id + " ");
       }
   }

   public static void insertionSort(int[] array) {
       for (int i = 1; i < array.length; i++) {
           int key = array[i];
           int j = i - 1;
           while (j >= 0 && array[j] > key) {
               array[j + 1] = array[j];
               j--;
           }
           array[j + 1] = key;
       }
   }
}




3. Merge Sort - Sort an Array of Book Prices
Problem Statement:
A bookstore maintains a list of book prices in an array. Implement Merge Sort to sort the prices in ascending order.
Hint:
Divide the array into two halves recursively.
Sort both halves individually.
Merge the sorted halves by comparing elements.


class Merge {
   void merge(int[] arr, int left, int mid, int right) {
       int n1 = mid - left + 1;
       int n2 = right - mid;

       int[] leftArray = new int[n1];
       int[] rightArray = new int[n2];

       for (int i = 0; i < n1; i++)
           leftArray[i] = arr[left + i];
       for (int j = 0; j < n2; j++)
           rightArray[j] = arr[mid + 1 + j];

       int i = 0, j = 0, k = left;

       while (i < n1 && j < n2) {
           if (leftArray[i] <= rightArray[j]) {
               arr[k] = leftArray[i];
               i++;
           } else {
               arr[k] = rightArray[j];
               j++;
           }
           k++;
       }

       while (i < n1) {
           arr[k] = leftArray[i];
           i++;
           k++;
       }

       while (j < n2) {
           arr[k] = rightArray[j];
           j++;
           k++;
       }
   }

   void sort(int[] arr, int left, int right) {
       if (left < right) {
           int mid = left + (right - left) / 2;

           sort(arr, left, mid);
           sort(arr, mid + 1, right);

           merge(arr, left, mid, right);
       }
   }

   public static void main(String[] args) {
       int[] prices = { 200, 450, 150, 300, 100, 400 };
       Merge mergeSort = new Merge();
       mergeSort.sort(prices, 0, prices.length - 1);

       for (int price : prices) {
           System.out.print(price + " ");
       }
   }
}




4. Quick Sort - Sort Product Prices
Problem Statement:
An e-commerce company wants to display product prices in ascending order. Implement Quick Sort to sort the product prices.
Hint:
Pick a pivot element (first, last, or random).
Partition the array such that elements smaller than the pivot are on the left and larger ones are on the right.
Recursively apply Quick Sort on left and right partitions.


public class Quick {
   public static void quickSort(int[] arr, int low, int high) {
       if (low < high) {
           int pivotIndex = partition(arr, low, high);
           quickSort(arr, low, pivotIndex - 1);
           quickSort(arr, pivotIndex + 1, high);
       }
   }

   private static int partition(int[] arr, int low, int high) {
       int pivot = arr[high];
       int i = low - 1;
       for (int j = low; j < high; j++) {
           if (arr[j] < pivot) {
               i++;
               int temp = arr[i];
               arr[i] = arr[j];
               arr[j] = temp;
           }
       }
       int temp = arr[i + 1];
       arr[i + 1] = arr[high];
       arr[high] = temp;
       return i + 1;
   }

   public static void main(String[] args) {
       int[] prices = {1200, 500, 800, 1500, 300};
       quickSort(prices, 0, prices.length - 1);
       for (int price : prices) {
           System.out.print(price + " ");
       }
   }
}




5. Selection Sort - Sort Exam Scores
Problem Statement:
A university needs to sort students’ exam scores in ascending order. Implement Selection Sort to achieve this.
Hint:
Find the minimum element in the array.
Swap it with the first unsorted element.
Repeat the process for the remaining elements.


public class Selection {
   public static void main(String[] args) {
       int[] scores = {85, 62, 78, 90, 55, 71};
       selectionSort(scores);
       for (int score : scores) {
           System.out.print(score + " ");
       }
   }

   public static void selectionSort(int[] array) {
       int n = array.length;
       for (int i = 0; i < n - 1; i++) {
           int minIndex = i;
           for (int j = i + 1; j < n; j++) {
               if (array[j] < array[minIndex]) {
                   minIndex = j;
               }
           }
           int temp = array[minIndex];
           array[minIndex] = array[i];
           array[i] = temp;
       }
   }
}




6. Heap Sort - Sort Job Applicants by Salary
Problem Statement:
A company receives job applications with different expected salary demands. Implement Heap Sort to sort these salary demands in ascending order.
Hint:
Build a Max Heap from the array.
Extract the largest element (root) and place it at the end.
Reheapify the remaining elements and repeat until sorte


public class Heap {
   public void heapSort(int[] arr) {
       int n = arr.length;

       for (int i = n / 2 - 1; i >= 0; i--) {
           heapify(arr, n, i);
       }

       for (int i = n - 1; i > 0; i--) {
           int temp = arr[0];
           arr[0] = arr[i];
           arr[i] = temp;

           heapify(arr, i, 0);
       }
   }

   private void heapify(int[] arr, int n, int i) {
       int largest = i;
       int left = 2 * i + 1;
       int right = 2 * i + 2;

       if (left < n && arr[left] > arr[largest]) {
           largest = left;
       }

       if (right < n && arr[right] > arr[largest]) {
           largest = right;
       }

       if (largest != i) {
           int swap = arr[i];
           arr[i] = arr[largest];
           arr[largest] = swap;

           heapify(arr, n, largest);
       }
   }

   public static void main(String[] args) {
       Heap heap = new Heap();
       int[] salaries = {45000, 32000, 54000, 29000, 61000, 47000};
       heap.heapSort(salaries);

       for (int salary : salaries) {
           System.out.print(salary + " ");
       }
   }
}


7. Counting Sort - Sort Student Ages
Problem Statement:
A school collects students’ ages (ranging from 10 to 18) and wants them sorted. Implement Counting Sort for this task.
Hint:
Create a count array to store the frequency of each age.
Compute cumulative frequencies to determine positions.
Place elements in their correct positions in the output array.


public class Counting {
   public static void countingSort(int[] ages) {
       int[] count = new int[19];
       int[] output = new int[ages.length];

       for (int age : ages) {
           count[age]++;
       }

       for (int i = 1; i < count.length; i++) {
           count[i] += count[i - 1];
       }

       for (int i = ages.length - 1; i >= 0; i--) {
           output[count[ages[i]] - 1] = ages[i];
           count[ages[i]]--;
       }

       System.arraycopy(output, 0, ages, 0, ages.length);
   }

   public static void main(String[] args) {
       int[] ages = {12, 14, 13, 12, 15, 10, 18, 17, 11, 10};
       countingSort(ages);
       for (int age : ages) {
           System.out.print(age + " ");
       }
   }
}


